---
layout: post
title:  "[번역] 2016년 최신 자바스크립트 동향"
date:   2016-03-15
---

<p class="intro">
원글: <a href="https://medium.com/javascript-and-opinions/state-of-the-art-javascript-in-2016-ab67fc68eb0b#.du4gxr9p9"> State of the Art JavaScript in 2016 </a><br />
원글 저자: Francois Ward
<br />
<br />

번역: paulsoh
</p>

누군가가 자바스크립트로 새로운 프런트엔드 프로젝트를 시작하거나 기존의 프로젝트를 개조하려고 한다고 해보자. 그는 한동안 자바스크립트 생태계와 거리를 두고 살았을 수도 있고, 그렇지 않았다고 하더라도 React, Flux, Angular, Aurelia, Mocha, Jasmine, Babel, TypeScript, Flow 등등 넘쳐나는 프레임워크들 사이에서 어떤 것을 선택해야 할지 막연할 수가 있다. 그 정도로 자바스크립트 프레임워크는 수시로 생겨나고 있다. 적어도 지금까지는 …

좋은 소식은 이 생태계가 조금씩 안정(slow down)되고 있다는 것이다. 프로젝트들은 합쳐지고 있으며 최선의 방법론에 대한 것들이 조금씩 명확해지고 있다. 사람들은 새로운 프레임워크를 만들어 가기보다는 기존의 존재하는 것들의 위에 새로운 것들을 만들어 나가고 있는 추세이다.

시작하면서, 최신의 웹 어플리케이션을 구성하는 각 부분에서 필자가 개인적으로 생각하는 최고의 프레임 워크를 꼽아보고자 한다. 어떤 선택들은 논란의 여지가 있지만 각 선택들에 대해서는 필자 나름의 근거를 제시하도록 하겠다. 개인적인 경험이나 각종 커뮤니티에서의 동향에 기반한 내 개인적인 의견이고 당신의 수준의 높고 낮음에 따라서 당신과 생각하는 바가 다를 수 있다는 것을 명심해라.

코어 라이브러리: React



지금 시점에서의 승자는 React이다. React에서는:

어플리케이션 전체적으로 컴포넌트 단위로 구성할 수 있어서 논리적인 이해가 쉬워진다.
Learning curve가 매우 낮다. 중요한 API는 한 페이지안에 들어갈 수 있다.
JSX는 짱이다. 마크업을 작성할 때 자바스크립트의 강력함을 그대로 사용할 수 있다.
(추후에 더 다룰) Flux와 Redux와의 궁합이 잘 맞는다
React 커뮤니티는 대단하다. 이 커뮤니티에서 Redux와 같은 “자매품” 툴들도 만들어 냈다.(이 또한 추후에 더 다룰 내용)
큰 규모의 어플리케이션에서 높은 수준의 데이터 흐름을 작성하기가 2 way 데이터 바인딩(eg: Knockout)보다 훨씬 수월하다.
React에서도 서버 측 렌더링이 가능하다.
이 부분에 있어서는 이미 충분히 자리잡은 Ember, Aurelia 그리고 Angular와 같은 프레임워크들도 있다. 그들도 모든것들을 처리해주겠다고 “promise” 해주지만, React에서는 몇 가지의 결정만 더 내려주면 훨씬 더 강건한 구현이 가능하다. 지금 시점에서의 Angular 2.0같은 프레임워크는 React를 따라잡기에 급급하다.

React를 선택하는 것은 기술적인 결정이 아닌 비즈니스 적인 결정이다.

추가 점수: 모바일 어플리케이션까지 고려한다면 그 때에는 React Native에 감사하게 될 것이다.

어플리캐이션 생명 주기: Redux



우리에게 뷰와 컴포넌트 레이어가 있으니, 상태를 관리해주고 우리 어플리케이션의 생명주기를 관리해줄 툴이 필요하다. 이 부문에 있어서도 Redux의 명백한 승리이다.

React와 함께, 페이스북에서는 Flux라는 (단방향 데이터 흐름을 위한) 디자인 패턴을 제안했다. Flux는 promise나 상태 관리를 단순화해주는 데에 기여했으나 개발자들에게 상태를 어떻게 저장할 지 혹은 어디에서 Ajax 요청을 해야할 지에 대한 궁금증도 유발했다.

그러한 질문들에 대한 명확한 답을 하기 위해, 수많은 프레임워크들이 Flux 패턴 위에서 개발되었다: Fluxible, Reflux, Alt, Flummox, Lux, Nuclear, Fluxxor 기타 등등…

그 중 하나가 여러 방면에서 뛰어나, 결국 관련 커뮤니티 내의 관심을 끌게 되었는데 그것이 바로 Redux이다.

Redux에서는 오가는 모든 부분은 순수한 함수들로 구성되어있다. 중앙 집적형 구조로 단 하나의 store와 진실의 소스(source of truth)가 있다. Reducer 함수는 store를 구성하는 데이터를 조작하는 것을 담당하게 되고 Redux를 사용함으로써 이 모든 과정이 순수한 flux보다 훨씬 더 명확해지게 된다.

더 중요한 것은, Redux는 배우기가 정말 쉽다는 것이다. Redux의 저자인 Dan Abramov는 훌륭한 선생님이고 그가 제작한 교육 영상들은 매우 훌륭하다. 비디오를 보면 금새 Redux 전문가가 될 수 있는데, 필자는 실제로 React를 전혀 사용해보지 않은 그룹의 엔지니어들이 불과 몇주만에 높은 수준의 양산 수준의 어플리케이션을 구현한 것을 본 적이 있다.

Redux관련한 커뮤니티 역시나 Redux만큼이나 최고 수준인데, 마법에 가까운 개발자 도구 부터 환상적인 memoization 유틸리티인 reselect까지, 여러 방면으로 개발자들에게 힘이 되어준다.

한가지 유의할 점은, Redux의 핵심 소스로 부터 최대한 멀리 떨어진 채 단순히 그것을 사용해야겠다는 안일한 생각에서 벗어나야 한다는 것이다. Redux는 모든 핵심 코드는 각각 타당한 논리와 이유가 있기에 그것을 사용하기에 앞서 “왜” 그렇게 되는 지에 대한 이해를 할 수 있도록 노력하는 것을 추천한다.

언어: ES6 + Babel.



CoffeeScript는 멀리하라. 그것이 제공하던 것보다 더 나은 기능들이 표준인 ES6에서 제공된다. CoffeeLint와 같은 툴들도 매우 부족하고, 커뮤니티 또한 빠른 속도로 줄어들고 있다.

ES6는 표준이고 대부분의 최신 브라우저에서 지원이 된다. Babel은 플러그인 가능한 ES6 컴파일러로써 타겟 브라우저에 대한 설정을 해주면 ES6을 이용한 개발 환경을 수월하게 할 수 있다.

(후략)
